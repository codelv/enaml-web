'''
Created on Apr 17, 2017

Based on https://nucleic.github.io/enaml/docs/examples/ex_advanced.html

Generates a form based on the properties of the model given. 

@author: jrm
'''
from atom.api import Atom, Member, Value, Bool, Enum, Event, Float, Int, Str, Unicode, List, Instance
from enaml.core.api import DynamicTemplate
from enaml.core.api import Looper, Conditional
from web.components.api import (P, Button, Div, Form, Label, Input, Select, Option, Ul, Li, A, Span)

def DynamicModel(obj,label="value"):
    """ Create a model """
    if isinstance(obj,Member):
        #: No value is set try to get the default
        return obj.validate_mode[1]() # Umm... should use default?
    if isinstance(obj, Atom):
        return obj
    members = {}
    typemap = {
        int:Int,
        float:Float,
        unicode:Unicode,
        str:Str,
    }
    if isinstance(obj,Value):
        members[label] = obj
    elif type(obj) in typemap:
        members[label] = typemap[type(obj)](default=obj)
    Model = type('Model',(Atom,),members)
    return Model()

#------------------------------------------------------------------------------
# "Libaray" Definitions
#------------------------------------------------------------------------------
# The templates and enamldefs defined in this section are ones which can
# be written once and then used as a library. They are more-or-less fully
# generic and will work for a large swath of models.

template FormControl(Attr, MemberType):
    """ A template which generates a control for an AutoForm.

    This default specialization displays read-only text for the value.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.

    MemberType : type
        The type of the member being accessed.

    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        Div:
            cls = 'input-field col s12'
            Input:
                name = str(Attr)
                value << unicode(getattr(model, Attr))
                type = 'text'
                attrs = {'disabled':'1'}
            Label:
                text = label_text
                attrs = {'for':Attr}

template FormControl(Attr, MemberType: Int):
    """ A form control template specialization for Int members.

    This control uses a spin box to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        Div:
            cls = 'input-field col s12'
            Input:
                name = str(Attr)
                type = 'text'
                value <<  str(getattr(model, Attr))
                value :: setattr(model,Attr,int(change['value']))
            Label:
                text = label_text
                attrs = {'for':Attr}

template FormControl(Attr, MemberType: Str):
    """ A form control template specialization for Str members.

    This control uses a Field to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        attr metadata = model.get_member(Attr).metadata
        Div:
            cls = 'input-field col s12'
            Input:
                type << 'password' if metadata and metadata.get('style','text')=='password' else 'text' 
                name = str(Attr)
                value := getattr(model, Attr)
            Label:
                text = label_text
                attrs = {'for':Attr}

template FormControl(Attr, MemberType: Unicode):
    """ A form control template specialization for Unicode members.

    This control uses a Field to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        attr metadata = model.get_member(Attr).metadata
        Div:
            cls = 'input-field col s12'
            Input:
                name = str(Attr)
                type << 'password' if metadata and metadata.get('style','text')=='password' else 'text' 
                value := getattr(model, Attr)
            Label:
                text = label_text
                attrs = {'for':Attr}

template FormControl(Attr, MemberType: Float):
    """ A form control template specialization for Float members.

    This control uses a FloatField to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        Div:
            cls = 'input-field col s12'
            Input:
                type = 'text'
                name = str(Attr)
                value <<  str(getattr(model, Attr))
                value :: setattr(model,Attr,float(change['value']))
            Label:
                text = label_text
                attrs = {'for':Attr}

template FormControl(Attr, MemberType: Bool):
    """ A form control template specialization for Bool members.

    This control uses a CheckBox to represent the value.

    """
    const label_text = Attr.title().replace("_"," ")
    Conditional:
        attr metadata = model.get_member(Attr).metadata
        condition << bool(not metadata or metadata.get("style","checkbox")=='checkbox')
        P:
            Input:
                type = 'checkbox'
                name = str(Attr)
                id = str(Attr)
                checked << 'checked' if getattr(model,Attr) else ''
                checked :: setattr(model,Attr,change['value']=="checked")
            Label:
                text = label_text
                attrs = {'for':Attr}
    Conditional:
        attr metadata = model.get_member(Attr).metadata
        condition << bool(metadata and metadata.get("style","checkbox")=='switch')
        Label:
            text = label_text
            attrs = {'for':Attr}
        Div:
            cls = 'switch'
            Label:
                Input:
                    type = 'checkbox'
                    name = str(Attr)
                    id = str(Attr)
                    checked << 'checked' if getattr(model,Attr) else ''
                    checked :: setattr(model,Attr,change['value']=='checked')
                Span:
                    cls = "lever"
        Div:
            cls = 'row'
                    

template FormControl(Attr, MemberType: Event):
    """ A form control template specialization for Event members.

    This control uses a PushButton to represent the value.

    """
    const button_text = Attr[0].upper() + Attr[1:].lower()
    Div:
        cls = 'row'
        Div:
            cls = 'input-field col s12'
            Button:
                text = button_text
                cls="waves-effect waves-light btn"
                type='submit'
                    
                # TODO:   clicked :: getattr(model, Attr)()


def enum_labels(model, attr):
    """ Return the list of enum labels for the given model and attr.

    """
    items = getattr(type(model), attr).items
    return sorted(items)


template FormControl(Attr, MemberType: Enum):
    """ A form control template specialization for Enum members.

    Renders either a select or a list of radio inputs based on the `style` metadata tag. 

    """
    const label_text = Attr.title().replace("_"," ")
    Conditional:
        attr metadata = model.get_member(Attr).metadata
        condition << bool((not metadata) or metadata.get('style','select')=='select')
        Div:
            cls = 'row'
            Div:
                cls = 'input-field col s12'
                Select: select:
                    name = str(Attr)
                    value := getattr(model, Attr)
                    Looper:
                        iterable << enum_labels(model, Attr)
                        Option:
                            text = str(loop_item)
                            value = str(loop_item)
                            selected << loop_item == getattr(model, Attr)
                Label:
                    text = label_text
                    attrs = {'for':Attr}
    Conditional:
        attr metadata = model.get_member(Attr).metadata
        condition << bool(metadata and metadata.get('style','select')=='radio')
        Label:
            text = label_text
            attrs = {'for':Attr}
        Looper:
            iterable << enum_labels(model, Attr)
            P:
                Input:
                    name = str(Attr)
                    type = 'radio'
                    id = '{}-{}'.format(Attr,loop_index)
                    value = str(loop_item)
                    checked << "checked" if getattr(model,Attr)==loop_item else ""
                    checked :: setattr(model,Attr,loop_item)
                Label:
                    text = str(loop_item)
                    attrs = {'for':'{}-{}'.format(Attr,loop_index)}
        Div:
            cls = 'row'

template FormControl(Attr, MemberType: List):
    """ A form control template specialization for Int members.
  
    This control uses a spin box to represent the value.
  
    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        Div:
            cls = 'col s12'
            Label:
                text = '{} List'.format(label_text)
                attrs = {'for':Attr}
    Div:
        cls = 'row'
        Div:
            cls = 'col s12'
            Ul:
                cls = 'tabs'
                Looper:
                    iterable = getattr(model,Attr)
                    Li:
                        cls = 'tab'
                        A:
                            href = '#{}_{}'.format(Attr, loop_index)
                            text = '{} {}'.format(label_text, loop_index+1)
        Looper:
            iterable = getattr(model,Attr)
            Div:
                id = '{}_{}'.format(Attr,loop_index)
                cls = 'col s12'
                attr obj = loop_item or model.get_member(Attr)
                AutoForm:
                    model = DynamicModel(obj,'{}_{}'.format(Attr,loop_index+1))
    

template FormControl(Attr, MemberType: Instance):
    """ A form control template specialization for Int members.
  
    This control uses a spin box to represent the value.
  
    """
    const label_text = Attr.title().replace("_"," ")
    Div:
        cls = 'row'
        Div:
            cls = 'input-field col s12'
            
            Label:
                text = label_text
                attrs = {'for':Attr}
    Div:
        cls = 'row'
        attr obj = getattr(model,Attr) or model.get_member(Attr)
        AutoForm:
            #inline = True
            model = DynamicModel(obj)
            
                
template FormItem(Attr, MemberType):
    """ A template which generates a pair of items for an AutoForm.

    Parameters
    ----------
    Attr : str
        The name of the attribute on 'model' being accessed.

    MemberType : type
        The type of the member being accessed.

    """
    FormControl(Attr, MemberType):
        pass
    
def form_sort(member):
        if member[1].metadata:
            return member[1].metadata.get('order',999)
        return 999

def form_spec(obtype,fields=None):
    """ Generate a form specification for an atom type.

    Parameters
    ----------
    obtype : type
        The Atom subclass of interest.

    Returns
    -------
    result : tuple
        A tuple of 2-tuples of (attr, member_type) for all non-private
        members of the class.

    """
    items = []
    fields = fields.split(",") if fields else []
    for name, member in sorted(obtype.members().iteritems(),key=form_sort):
        if not name.startswith('_') and (not fields or name in fields):
            items.append((name, type(member)))
    #items.sort(key=form_sort)
    return tuple(items)


template ForEach(Spec, Item):
    """ A templated loop which maps a template over a sequence.

    Parameters
    ----------
    Spec : tuple
        A tuple of tuples which are the values to map over the item.

    Item : template
        A template which accepts *values from inner tuples of the spec.

    """
    ForEach(Spec[:-1], Item):
        pass
    Item(*Spec[-1]):
        pass


template ForEach(Spec: (), Item):
    """ The terminating condition for the templated loop.

    """
    pass


template AutoFormBody(ModelType,Fields):
    """ A template which builds the body for an AutoForm.

    Parameters
    ----------
    ModelType : type
        The type of the model. This should be an Atom subclass.
        
    Fields : string
        Comma separated list of fields to create for the model. 

    """
    const Spec = form_spec(ModelType,Fields)
    ForEach(Spec, FormItem):
        pass


template AutoFormBody(ModelType: type(None),Fields):
    """ A template specialization for null models.

    """
    pass


enamldef AutoForm(Form):
    """ A Form which automatically generates its body from a model.

    Parameters
    ----------
    model : Atom
        Model to generate the form for. This should be an Atom instance.
        
    Fields : List of strings
        List of member fields to include in the form. 

    """
    tag = 'form'
    attr model: Atom
    attr fields = []
    DynamicTemplate:
        base = AutoFormBody
        args << (type(model),",".join(fields))
                    